#include "shell.h"

/**
 * hsh - main shell loop
 * @information: the param & return information struct
 * @av: the argmnt vector from main()
 *
 * Return: 0 on success, 1 on error, or error code
 */
int hsh(info_t *information, char **av)
{
	ssize_t z = 0;
	int bltin_ret = 0;

	while (z != -1 && bltin_ret != -2)
	{
		clear_info(information);
		if (interactive(information))
			_puts("$ ");
		_eputchar(BUF_FLUSH);
		z = get_input(information);
		if (z != -1)
		{
			set_info(information, av);
			bltin_ret = find_bltin(information);
			if (bltin_ret == -1)
				find_cmd(information);
		}
		else if (interactive(information))
			_putchar('\n');
		free_info(information, 0);
	}
	write_history(information);
	free_info(information, 1);
	if (!interactive(information) && information->status)
		exit(information->status);
	if (bltin_ret == -2)
	{
		if (information->err_num == -1)
			exit(information->status);
		exit(information->err_num);
	}
	return (bltin_ret);
}

/**
 * find_bltin - fnds a bltin command
 * @information: the param & return information struct
 *
 * Return: -1 if bltin not found,
 * 	0 if bltin executed successfully,
 * 	1 if bltin found but not successful,
 * 	2 if bltin signals exit()
 */
int find_bltin(info_t *information)
{
	int a, blt_in_ret = -1;
	bltin_table bltintbl[] = {
		{"exit", _ourexit},
		{"env", _ourenv},
		{"help", _ourhelp},
		{"history", _ourhistory},
		{"setenv", _oursetenv},
		{"unsetenv", _ourunsetenv},
		{"cd", _ourcd},
		{"alias", _ouralias},
		{NULL, NULL}
	};

	for (a = 0; bltintbl[a].type; a++)
		if (_strcmp(information->argv[0], bltintbl[a].type) == 0)
		{
			information->line_count++;
			blt_in_ret = bltintbl[a].func(information);
			break;
		}
	return (blt_in_ret);
}

/**
 * find_cmd - fnds a command in PATH
 * @information: the param & return information struct
 *
 * Return: void
 */
void find_cmd(info_t *information)
{
	char *path = NULL;
	int a, g;

	information->path = information->argv[0];
	if (information->linecount_flag == 1)
	{
		information->line_count++;
		information->linecount_flag = 0;
	}
	for (a = 0, g = 0; information->arg[a]; a++)
		if (!is_delim(information->arg[a], " \t\n"))
			g++;
	if (!g)
		return;

	path = find_path(information, _gtenv(information, "PATH="), information->argv[0]);
	if (path)
	{
		information->path = path;
		fork_cmd(information);
	}
	else
	{
		if ((interactive(information) || _gtenv(information, "PATH=")
					|| information->argv[0][0] == '/') && is_cmd(information, information->argv[0]))
			fork_cmd(information);
		else if (*(information->arg) != '\n')
		{
			information->status = 127;
			print_error(information, "not found\n");
		}
	}
}

/**
 * fork_cmd - forks a an exec thread to run cmd
 * @information: the param & return information struct
 *
 * Return: void
 */
void fork_cmd(info_t *information)
{
	pid_t child_pid;

	child_pid = fork();
	if (child_pid == -1)
	{
		perror("Error:");
		return;
	}
	if (child_pid == 0)
	{
		if (execve(information->path, information->argv, get_environ(information)) == -1)
		{
			free_info(information, 1);
			if (errno == EACCES)
				exit(126);
			exit(1);
		}
		/* TODO: PUT ERROR fnct */
	}
	else
	{
		wait(&(information->status));
		if (WIFEXITED(information->status))
		{
			information->status = WEXITSTATUS(information->status);
			if (information->status == 126)
				print_error(information, "Permission denied\n");
		}
	}
}
